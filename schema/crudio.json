{
  "$schema": "http://json-schema.org/draft-07/schema",
  "type": "object",
  "definitions": {
    "entityProperties": {
      "description": "Specifies an entity, its fields and relationships",
      "type": "object",
      "properties": {
        "help": {
          "description": "Documentation descriving the purpose of the entity",
          "type": "string"
        },
        "abstract": {
          "description": "Abstract entities provide inheritable fields and do not translate to database tables",
          "type": "boolean"
        },
        "count": {
          "description": "Integer specifying the required number of entities to create, or a [tag] which has a list of values, where an entity is created for each value",
          "type": [
            "string",
            "integer"
          ]
        },
        "triggers": {
          "enum": [
            "off",
            "creating",
            "streaming"
          ]
        },
        "inherits": {
          "description": "A string containing the name of an entity, or an array of strings specifying multiple entities from which to inherit fields",
          "type": [
            "string",
            "array"
          ],
          "items": {
            "type": "string"
          }
        },
        "snippets": {
          "description": "Array of snippet names, which specify pre-defined fields to import",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "description": "Specifies aditional fields for the join table",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/field"
          }
        },
        "relationships": {
          "description": "Array of one to many or many to many relationships",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Assigns a preferred name for the relationship and which is used in the database",
                "type": "string"
              },
              "type": {
                "enum": [
                  "many",
                  "one"
                ]
              },
              "to": {
                "description": "Name of the other entity which is connected in the relationship",
                "type": "string"
              }
            },
            "if": {
              "properties": {
                "type": {
                  "const": "many"
                }
              }
            },
            "then": {
              "properties": {
                "count": {
                  "description": "Specifies the number of entries to create per parent entity",
                  "type": "integer"
                },
                "fields": {
                  "description": "Specifies aditional fields for the join table",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/field"
                  }
                }
              }
            },
            "required": [
              "to",
              "type"
            ]
          }
        }
      }
    },
    "field": {
      "description": "Specifies an entity field",
      "type": "object",
      "properties": {
        "name": {
          "description": "Preferred fieldname, defaults to the JSON key used for this field node",
          "type": "string"
        },
        "key": {
          "description": "If true, the field is the primary key of the entity",
          "type": "boolean"
        },
        "required": {
          "description": "If true, the field must have a value when saved to the database",
          "type": "boolean"
        },
        "unique": {
          "description": "If true, the field must have a unique value amongst all entities of the same type",
          "type": "boolean"
        },
        "indexed": {
          "description": "If true, the field will be indexed in the database",
          "type": "boolean"
        },
        "generator": {
          "description": "Specifies the generator to use, and must be wrapped in [ ], e.g. [name]",
          "type": "string"
        },
        "type": {
          "description": "Field type",
          "string": "string",
          "enum": [
            "uuid",
            "string",
            "integer",
            "decimal",
            "timestamp",
            "jsonb",
            "geo_line",
            "geo_point",
            "geo_polygon"
          ]
        },
        "help": {
          "description": "Field specific documentation",
          "type": "string"
        },
        "caption": {
          "description": "Default caption to use in User Interface",
          "type": "string"
        },
        "placeholder": {
          "description": "Default placeholder text to use in User Interface",
          "type": "string"
        },
        "sensitive_data": {
          "description": "Indicates that the field contains sensitive data",
          "type": "boolean"
        },
        "choices": {
          "description": "Comma separated list of choices",
          "type": "string"
        },
        "multi_choice": {
          "description": "Indicates multiple choices are allowed",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "Default value",
          "type": [
            "string",
            "number"
          ]
        },
        "can_sort": {
          "description": "Indicates field can be used to sort lists",
          "type": "boolean"
        },
        "default_sort": {
          "description": "Indicates field is the default sort key",
          "type": "boolean"
        },
        "range_low": {
          "description": "Indicates field is the default sort key",
          "type": [
            "string",
            "number"
          ]
        },
        "range_high": {
          "description": "Indicates field is the default sort key",
          "type": [
            "string",
            "number"
          ]
        },
        "validation": {
          "description": "Custom validation rules",
          "type": "string"
        }
      }
    },
    "range_list": {
      "dscription": "Special generator used in a stream that provides values from an array",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name for range",
          "type": "string"
        },
        "list": {
          "description": "List of values which will be iterated in turn",
          "type": "array",
          "items": {
            "description": "Item value",
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "list"
      ]
    },
    "range_numeric": {
      "dscription": "Special generator used in a stream that provides incremental numeric values",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name for range",
          "type": "string"
        },
        "min": {
          "description": "Initial value of range",
          "type": [
            "number",
            "string"
          ]
        },
        "max": {
          "description": "Maximum value of range",
          "type": [
            "number",
            "string"
          ]
        },
        "increment": {
          "description": "Incremental step size",
          "type": [
            "number",
            "string"
          ]
        }
      },
      "required": [
        "name",
        "min",
        "max",
        "increment"
      ]
    },
    "range": {
      "oneOf": [
        {
          "$ref": "#/definitions/range_list"
        },
        {
          "$ref": "#/definitions/range_numeric"
        }
      ]
    },
    "entity_output": {
      "description": "Output containing generated values. All text between { ...is javascript... } and 'ctx' provides access to execution context.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": true
      }
    },
    "for_loop": {
      "description": "A loop that iterates over a specified range, and can recusrively run other for loops",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/range"
        },
        "for_loop": {
          "$ref": "#/definitions/for_loop"
        },
        "output": {
          "$ref": "#/definitions/entity_output"
        }
      },
      "required": [
        "range"
      ]
    },
    "stream": {
      "description": "Streams create a collection of child entities beneath a parent entity using nested loops to control values of generators used in the data creation process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name of the stream definition",
          "type": "string"
        },
        "parentEntity": {
          "description": "The parent entity type which will have a one to many relationship reference from the child entity",
          "examples": [
            "Device"
          ],
          "type": "string"
        },
        "key": {
          "description": "Path to a field on the parent entity which is used to filter which parent entities are used in the stream",
          "examples": [
            "DeviceType.name - the stream navigates in the Device object (as the parent entity), finds the DeviceType field on the Device object, and compares the 'name' field  with the 'value' attribute defined in the stream"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of the field on the parent entity used for filtering purposes",
          "examples": [
            "temperature_sensor"
          ],
          "type": [
            "string",
            "number",
            "integer"
          ]
        },
        "createEntity": {
          "description": "The child entity to be created and attached to the parent entity",
          "examples": [
            "DeviceReading"
          ],
          "type": "string"
        },
        "loop": {
          "$ref": "#/definitions/for_loop"
        }
      },
      "required": [
        "name",
        "parentEntity",
        "createEntity",
        "loop"
      ]
    }
  },
  "properties": {
    "documentation": {
      "description": "Provide a thumbnail graphic and summary documentation about the model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name of the model",
          "type": "string"
        },
        "title": {
          "description": "Title of the model",
          "type": "string"
        },
        "description": {
          "description": "Summary describing the model",
          "type": "string"
        },
        "thumbnail": {
          "description": "URL of a graphic to represent the model",
          "type": "string"
        },
        "tags": {
          "description": "Group similar models by domain and features",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "published_by": {
          "description": "Identifier of the publisher / owner of the model",
          "type": "string"
        },
        "url": {
          "description": "URL to the website or repository where further information can be sourced about the model",
          "type": "string"
        },
        "license": {
          "description": "Licensing terms for the model",
          "type": "string"
        },
        "credit": {
          "description": "Recognition of contributions from key parties",
          "type": "string"
        },
        "fee": {
          "description": "Cost of using the model, or other form of compensation, e.g. donation.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "title",
        "description",
        "thumbnail"
      ]
    },
    "include": {
      "description": "Include other datamodels, which must be defined as JSON files and conform to the Crudio schema",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "variables": {
      "description": "Specifies values that are used to initialise generators. The variable name must match one existing generator name.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the variable",
            "type": "string"
          },
          "value": {
            "description": "Value of the variable",
            "type": [
              "string",
              "number",
              "object"
            ]
          }
        },
        "required": [
          "name",
          "value"
        ]
      }
    },
    "generators": {
      "description": "Specifies data generators which create values for entity fields",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the generator",
            "type": "string"
          },
          "values": {
            "description": "Value or values that the generator can choose from. Generators can also be initialised from values specified in the variables section.",
            "examples": [
              "'[1>10]' creates a number from 1 to 10",
              "'[word1;word2]' selects a random value from a semicolon separated list",
              "'[!connect_entity.field]' adopts a value provided by a related entity, such as a company.name, which can be used in an employee email address",
              "'[!~connect_entity.field]' adopt a value provided by a related entity, remove all spaces and convert to lower case",
              "'my text written on [date] by [User.firstname] [User.lastname]' form text snippets and embed generated values",
              "'[?fieldName]' choose a generator based on a field value, for example: '[?Device.DeviceType.name]'",
              "JSON Object"
            ],
            "type": [
              "string",
              "object"
            ]
          }
        },
        "required": [
          "name",
          "values"
        ]
      }
    },
    "snippets": {
      "description": "Specify pre-defined fields which can be used by any entity in the datamodel",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/field"
      }
    },
    "entities": {
      "description": "Specify the entities in the datamodel",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/entityProperties"
      }
    },
    "assign": {
      "description": "Assign hardcoded values to entities which have been placed in data tables",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "target": {
            "description": "Path to the target object which is to be assigned values from 'fields'",
            "examples": [
              "Organisation(0)",
              "Organisation(10).Users(3)"
            ],
            "type": "string"
          },
          "fields": {
            "type": "object"
          }
        },
        "required": [
          "target",
          "fields"
        ]
      }
    },
    "triggers": {
      "description": "Instructions to execute when an entity is created",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "entity": {
            "description": "The entity for which instructions are to be executed",
            "type": "string"
          },
          "scripts": {
            "type": [
              "array"
            ],
            "items": [
              {
                "description": "Instructions to execute",
                "examples": [
                  "'ConnectedEntity(index).RelationshipName?field=value' creates the connected entity and places it in a list, then forms a relationship between the new entity and the RelationshipName by searching the related table for a field having a specified value",
                  "'User(0).Role?name=CEO'",
                  "'User(0).Department?name=Sales'"
                ],
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "entity",
          "scripts"
        ]
      }
    },
    "streams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/stream"
      }
    }
  }
}
