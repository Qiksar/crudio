{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"definitions": {
		"entityProperties": {
			"description": "specifies an entity, its fields and relationships",
			"type": "object",
			"properties": {
				"abstract": {
					"description": "abstract entities provide inheritable fields and do not translate to database tables",
					"type": "boolean"
				},
				"count": {
					"description": "integer specifying the required number of entities to create, or a [tag] which has a list of values, where an entity is created for each value",
					"type": [
						"string",
						"integer"
					]
				},
				"inherits": {
					"description": "a string containing the name of an entity, or an array of strings specifying multiple entities from which to inherit fields",
					"type": [
						"string",
						"array"
					],
					"items": {
						"type": "string"
					}
				},
				"snippets": {
					"description": "array of snippet names, which specify pre-defined fields to import",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"fields": {
					"description": "specifies aditional fields for the join table",
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/field"
					}
				},
				"relationships": {
					"description": "array of one to many or many to many relationships",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"description": "assigns a preferred name for the relationship and which is used in the database",
								"type": "string"
							},
							"type": {
								"enum": [
									"many",
									"one"
								]
							},
							"to": {
								"description": "name of the other entity which is connected in the relationship",
								"type": "string"
							}
						},
						"if": {
							"properties": {
								"type": {
									"const": "many"
								}
							}
						},
						"then": {
							"properties": {
								"count": {
									"description": "specifies the number of entries to create per parent entity",
									"type": "integer"
								},
								"fields": {
									"description": "specifies aditional fields for the join table",
									"type": "object",
									"additionalProperties": {
										"$ref": "#/definitions/field"
									}
								}
							}
						},
						"required": [
							"to",
							"type"
						]
					}
				}
			}
		},
		"field": {
			"description": "specifies an entity field",
			"type": "object",
			"properties": {
				"name": {
					"description": "preferred fieldname, defaults to the JSON key used for this field node",
					"type": "string"
				},
				"key": {
					"description": "if true, the field is the primary key of the entity",
					"type": "boolean"
				},
				"required": {
					"description": "if true, the field must have a value when saved to the database",
					"type": "boolean"
				},
				"unique": {
					"description": "if true, the field must have a unique value amongst all entities of the same type",
					"type": "boolean"
				},
				"generator": {
					"description": "specified the generator to use, and must be wrapped in [ ], e.g. [name]",
					"type": "string"
				},
				"type": {
					"description": "field type",
					"string": "string",
					"enum": [
						"uuid",
						"string",
						"integer",
						"decimal",
						"timestamp",
						"jsonb"
					]
				}
			}
		},
		"range_list": {
			"dscription": "special generator used in a stream that provides values from an array",
			"type": "object",
			"properties": {
				"name": {
					"description": "unique name for range",
					"type": "string"
				},
				"list": {
					"description": "list of values which will be iterated in turn",
					"type": "array",
					"items": {
						"description": "item value",
						"type": "string"
					}
				}
			},
			"required": [
				"name",
				"list"
			]
		},
		"range_numeric": {
			"dscription": "special generator used in a stream that provides incremental numeric values",
			"type": "object",
			"properties": {
				"name": {
					"description": "unique name for range",
					"type": "string"
				},
				"min": {
					"description": "initial value of range",
					"type": "number"
				},
				"max": {
					"description": "maximum value of range",
					"type": "number"
				},
				"increment": {
					"description": "incremental step size",
					"type": "number"
				}
			},
			"required": [
				"name",
				"min",
				"max",
				"increment"
			]
		},
		"range": {
			"oneOf": [
				{
					"$ref": "#/definitions/range_list"
				},
				{
					"$ref": "#/definitions/range_numeric"
				}
			]
		},
		"entity_output": {
			"description": "Output containing generated values. All text between { ...is javascript... } and 'ctx' provides access to execution context.",
			"type": "array",
			"items": {
				"type": "object",
				"additionalProperties": true
			}
		},
		"for_loop": {
			"description": "a loop that iterates over a specified range, and can recusrively run other for loops",
			"type": "object",
			"properties": {
				"range": {
					"$ref": "#/definitions/range"
				},
				"for_loop": {
					"$ref": "#/definitions/for_loop"
				},
				"output": {
					"$ref": "#/definitions/entity_output"
				}
			},
			"required": [
				"range"
			]
		},
		"stream": {
			"description": "a stream which creates a number of outputs for a specified entity",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"entity": {
					"type": "string"
				},
				"output": {
					"type": "string"
				},
				"for": {
					"$ref": "#/definitions/for_loop"
				}
			},
			"required": [
				"name",
				"entity",
				"output",
				"for"
			]
		}
	},
	"properties": {
		"include": {
			"description": "include other datamodels, which must be defined as JSON files and conform to the Crudio schema",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"generators": {
			"description": "specifies data generators which create values for entity fields",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"description": "name of the generator",
						"type": "string"
					},
					"values": {
						"description": "description of the values",
						"examples": [
							"'[1>10]' creates a number from 1 to 10",
							"'[word1;word2]' selects a random value from a semicolon separated list",
							"'[!connect_entity.field]' adopts a value provided by a related entity, such as a company.name, which can be used in an employee email address",
							"'[!~connect_entity.field]' adopt a value provided by a related entity, remove all spaces and convert to lower case",
							"'my text written on [date] by [User.firstname] [User.lastname]' form text snippets and embed generated values",
							"'[?fieldName]' choose a generator based on a field value, for example: '[?Device.DeviceType.name]'",
							"JSON Object"
						],
						"type": [
							"string",
							"object"
						]
					}
				},
				"required": [
					"name",
					"values"
				]
			}
		},
		"snippets": {
			"description": "specify pre-defined fields which can be used by any entity in the datamodel",
			"type": "object",
			"additionalProperties": {
				"$ref": "#/definitions/field"
			}
		},
		"entities": {
			"description": "specify the entities in the datamodel",
			"type": "object",
			"additionalProperties": {
				"$ref": "#/definitions/entityProperties"
			}
		},
		"assign": {
			"description": "assign hardcoded values to entities which have been placed in data tables",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"target": {
						"description": "path to the target object which is to be assigned values from 'fields'",
						"examples": [
							"Organisation(0)",
							"Organisation(10).Users(3)"
						],
						"type": "string"
					},
					"fields": {
						"type": "object"
					}
				},
				"required": [
					"target",
					"fields"
				]
			}
		},
		"triggers": {
			"description": "instructions to execute when an entity is created",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"entity": {
						"description": "the entity for which instructions are to be executed",
						"type": "string"
					},
					"scripts": {
						"type": [
							"array"
						],
						"items": [
							{
								"description": "instructions to execute",
								"examples": [
									"'ConnectedEntity(index).RelationshipName?field=value' creates the connected entity and places it in a list, then forms a relationship between the new entity and the RelationshipName by searching the related table for a field having a specified value",
									"'User(0).Role?name=CEO'",
									"'User(0).Department?name=Sales'"
								],
								"type": "string"
							}
						]
					}
				},
				"required": [
					"entity",
					"scripts"
				]
			}
		},
		"streams": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/stream"
			}
		}
	}
}