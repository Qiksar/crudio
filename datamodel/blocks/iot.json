{
	"$schema": "https://raw.githubusercontent.com/Qiksar/crudio/main/schema/crudio.json",
	"include": [
		"datamodel/base.json"
	],
	"generators": [
		{
			"name": "temperature",
			"values": "-10>44"
		},
		{
			"name": "humidity",
			"values": "5>100"
		},
		{
			"name": "light",
			"values": "0>100"
		},
		{
			"name": "windspeed",
			"values": "5>110"
		},
		{
			"name": "body_temperature",
			"values": "36>44"
		},
		{
			"name": "bp_dia",
			"values": "75>110"
		},
		{
			"name": "bp_sys",
			"values": "115>200"
		},
		{
			"name": "bptext",
			"values": "[bp_sys]/[bp_dia]"
		},
		{
			"name": "bp",
			"isJson": true,
			"values": "{'systolic':'[bp_sys]','diastolic':'[bp_dia]'}"
		},
		{
			"name": "bpm",
			"values": "50>150"
		},
		{
			"name": "glucose",
			"values": "5>20"
		},
		{
			"name": "device_type",
			"values": "temperature;humidity;light;windspeed;bp;bpm;glucose;body_temperature"
		},
		{
			"name": "device_site",
			"values": "shed;north paddock;south paddock;stock yard;"
		}
	],
	"entities": {
		"DeviceType": {
			"inherits": "Entity",
			"count": "[device_type]",
			"fields": {
				"name": {
					"generator": "[device_type]",
					"unique": true
				}
			}
		},
		"DeviceSite": {
			"inherits": "Entity",
			"count": "[device_site]",
			"triggers": "creating",
			"fields": {
				"name": {
					"generator": "[device_site]",
					"unique": true
				}
			}
		},
		"Device": {
			"inherits": "Entity",
			"count": 0,
			"relationships": [
				{
					"type": "one",
					"to": "DeviceType"
				},
				{
					"type": "one",
					"to": "DeviceSite"
				}
			]
		},
		"DeviceReading": {
			"inherits": "Entity",
			"count": 0,
			"fields": {
				"timestamp": {
					"type": "timestamp",
					"name": "timestamp"
				},
				"value": {
					"type": "jsonb",
					"generator": "[?Device.DeviceType.name]"
				}
			},
			"relationships": [
				{
					"type": "one",
					"to": "Device"
				}
			]
		}
	},
	"triggers": [
		{
			"entity": "DeviceSite",
			"scripts": [
				"Devices(0).DeviceType?name=temperature",
				"Devices(1).DeviceType?name=humidity",
				"Devices(2).DeviceType?name=windspeed",
				"Devices(3).DeviceType?name=light"
			]
		}
	],
	"streams": [
		{
			"name": "temperature",
			"parentEntity": "Devices",
			"key": "DeviceType.name",
			"value": "temperature",
			"createEntity": "DeviceReadings",
			"loop": {
				"range": {
					"name": "years_ago",
					"list": [
						"[years_ago_2]",
						"[years_ago_1]"
					]
				},
				"loop": {
					"range": {
						"name": "day_of_year",
						"type": "date",
						"min": 0,
						"max": 365,
						"increment": 1
					},
					"loop": {
						"range": {
							"name": "hour_of_day",
							"min": 0,
							"max": 23,
							"increment": 1
						},
						"output": {
							"timestamp": "` new Date( ([hour_of_day] * 3600000) + ([day_of_year] * 86400000) + new Date('[years_ago]').valueOf() ).toISOString().replace('Z', '') `",
							"value": "` ( Math.floor(Math.random() * 10) ) +  8 + ( [hour_of_day] <= 12 ? [hour_of_day] : (12 - [hour_of_day]) ) `"
						}
					}
				}
			}
		},
		{
			"name": "humidity",
			"parentEntity": "Devices",
			"key": "DeviceType.name",
			"value": "humidity",
			"createEntity": "DeviceReadings",
			"loop": {
				"range": {
					"name": "years_ago",
					"list": [
						"[years_ago_2]",
						"[years_ago_1]"
					]
				},
				"loop": {
					"range": {
						"name": "day_of_year",
						"type": "date",
						"min": 0,
						"max": 365,
						"increment": 1
					},
					"loop": {
						"range": {
							"name": "hour_of_day",
							"min": 0,
							"max": 23,
							"increment": 1
						},
						"output": {
							"timestamp": "` new Date( ([hour_of_day] * 3600000) + ([day_of_year] * 86400000) + new Date('[years_ago]').valueOf() ).toISOString().replace('Z', '') `",
							"value": "` Math.floor( ( Math.random() * 50) + ( 100 / ([hour_of_day] + 1) % 20 ) ) `"
						}
					}
				}
			}
		},
		{
			"name": "windspeed",
			"parentEntity": "Devices",
			"key": "DeviceType.name",
			"value": "windspeed",
			"createEntity": "DeviceReadings",
			"loop": {
				"range": {
					"name": "years_ago",
					"list": [
						"[years_ago_2]",
						"[years_ago_1]"
					]
				},
				"loop": {
					"range": {
						"name": "day_of_year",
						"type": "date",
						"min": 0,
						"max": 365,
						"increment": 1
					},
					"loop": {
						"range": {
							"name": "hour_of_day",
							"min": 0,
							"max": 23,
							"increment": 1
						},
						"output": {
							"timestamp": "` new Date( ([hour_of_day] * 3600000) + ([day_of_year] * 86400000) + new Date('[years_ago]').valueOf() ).toISOString().replace('Z', '') `",
							"value": "` Math.floor( ( ((Math.random() * 10) + 2) + (Math.random() * (365 - [day_of_year]))) + ( 100 / [hour_of_day] % 8 ) ) `"
						}
					}
				}
			}
		}
	]
}